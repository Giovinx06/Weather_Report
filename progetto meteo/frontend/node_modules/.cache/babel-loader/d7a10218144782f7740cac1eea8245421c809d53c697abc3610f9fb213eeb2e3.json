{"ast":null,"code":"import { mapGetters } from 'vuex';\nimport { Line } from 'vue-chartjs';\nimport { Chart as ChartJS, Title, Tooltip, Legend, LineElement, CategoryScale, LinearScale, PointElement } from 'chart.js';\nChartJS.register(Title, Tooltip, Legend, LineElement, CategoryScale, LinearScale, PointElement);\nexport default {\n  name: \"DashboardView\",\n  components: {\n    LineChart: Line\n  },\n  computed: {\n    ...mapGetters(['currentUser', 'weatherData']),\n    user() {\n      return this.currentUser || {};\n    },\n    chartData() {\n      return {\n        labels: this.weatherData.map(item => this.formatDate(item.fetchDate || item.createdAt || item.date)),\n        datasets: [{\n          label: 'Temperatura (°C)',\n          data: this.weatherData.map(item => item.temperature),\n          fill: false,\n          borderColor: 'rgb(75, 192, 192)',\n          tension: 0.1\n        }]\n      };\n    },\n    chartOptions() {\n      return {\n        responsive: true,\n        plugins: {\n          legend: {\n            display: true\n          },\n          title: {\n            display: true,\n            text: 'Andamento Temperature'\n          }\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Data'\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Temperatura (°C)'\n            }\n          }\n        }\n      };\n    }\n  },\n  methods: {\n    formatDate(dateStr) {\n      if (!dateStr) return '';\n      const date = new Date(dateStr);\n      return date.toLocaleString();\n    }\n  },\n  mounted() {\n    if (this.weatherData.length === 0) {\n      this.$store.dispatch('fetchWeatherData').catch(() => {});\n    }\n  }\n};","map":{"version":3,"names":["mapGetters","Line","Chart","ChartJS","Title","Tooltip","Legend","LineElement","CategoryScale","LinearScale","PointElement","register","name","components","LineChart","computed","user","currentUser","chartData","labels","weatherData","map","item","formatDate","fetchDate","createdAt","date","datasets","label","data","temperature","fill","borderColor","tension","chartOptions","responsive","plugins","legend","display","title","text","scales","x","y","methods","dateStr","Date","toLocaleString","mounted","length","$store","dispatch","catch"],"sources":["C:\\Programmazione\\Wheater_Report\\progetto\\frontend\\src\\views\\DashboardView.vue"],"sourcesContent":["<template>\r\n  <div class=\"dashboard-view container mt-5\">\r\n    <h2>Benvenuto nella Dashboard</h2>\r\n    <div class=\"alert alert-info mt-3\">\r\n      Ciao, {{ user.username }}! Qui puoi visualizzare i tuoi dati e le informazioni meteo.\r\n    </div>\r\n\r\n    <div class=\"card mt-4\">\r\n      <div class=\"card-header\">\r\n        Dati utente\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <p><strong>Username:</strong> {{ user.username }}</p>\r\n        <p><strong>Email:</strong> {{ user.email }}</p>\r\n        <p><strong>Ruolo:</strong> {{ user.role }}</p>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"card mt-4\">\r\n      <div class=\"card-header\">\r\n        Dati Meteo (esempio)\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <div v-if=\"weatherData.length === 0\">\r\n          Nessun dato meteo disponibile.\r\n        </div>\r\n        <table v-else class=\"table table-striped\">\r\n          <thead>\r\n            <tr>\r\n              <th>Città</th>\r\n              <th>Temperatura</th>\r\n              <th>Condizione</th>\r\n              <th>Data</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr v-for=\"(item, idx) in weatherData\" :key=\"idx\">\r\n              <td>{{ item.city }}</td>\r\n              <td>{{ item.temperature }} °C</td>\r\n              <td>{{ item.description }}</td>\r\n              <td>{{ formatDate(item.fetchDate || item.createdAt || item.date) }}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"card mt-4\">\r\n      <div class=\"card-header\">\r\n        Andamento Temperature (ultime ricerche)\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <LineChart v-if=\"weatherData.length > 0\" :data=\"chartData\" :options=\"chartOptions\" />\r\n        <div v-else class=\"text-muted\">Nessun dato per il grafico.</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapGetters } from 'vuex'\r\nimport { Line } from 'vue-chartjs'\r\nimport {\r\n  Chart as ChartJS,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  LineElement,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement\r\n} from 'chart.js'\r\n\r\nChartJS.register(Title, Tooltip, Legend, LineElement, CategoryScale, LinearScale, PointElement)\r\n\r\nexport default {\r\n  name: \"DashboardView\",\r\n  components: { LineChart: Line },\r\n  computed: {\r\n    ...mapGetters(['currentUser', 'weatherData']),\r\n    user() {\r\n      return this.currentUser || {};\r\n    },\r\n    chartData() {\r\n      return {\r\n        labels: this.weatherData.map(item => this.formatDate(item.fetchDate || item.createdAt || item.date)),\r\n        datasets: [\r\n          {\r\n            label: 'Temperatura (°C)',\r\n            data: this.weatherData.map(item => item.temperature),\r\n            fill: false,\r\n            borderColor: 'rgb(75, 192, 192)',\r\n            tension: 0.1\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    chartOptions() {\r\n      return {\r\n        responsive: true,\r\n        plugins: {\r\n          legend: { display: true },\r\n          title: { display: true, text: 'Andamento Temperature' }\r\n        },\r\n        scales: {\r\n          x: { title: { display: true, text: 'Data' } },\r\n          y: { title: { display: true, text: 'Temperatura (°C)' } }\r\n        }\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    formatDate(dateStr) {\r\n      if (!dateStr) return '';\r\n      const date = new Date(dateStr);\r\n      return date.toLocaleString();\r\n    }\r\n  },\r\n  mounted() {\r\n    if (this.weatherData.length === 0) {\r\n      this.$store.dispatch('fetchWeatherData').catch(() => {})\r\n    }\r\n  }\r\n}\r\n</script> "],"mappings":"AA4DA,SAASA,UAAS,QAAS,MAAK;AAChC,SAASC,IAAG,QAAS,aAAY;AACjC,SACEC,KAAI,IAAKC,OAAO,EAChBC,KAAK,EACLC,OAAO,EACPC,MAAM,EACNC,WAAW,EACXC,aAAa,EACbC,WAAW,EACXC,YAAW,QACN,UAAS;AAEhBP,OAAO,CAACQ,QAAQ,CAACP,KAAK,EAAEC,OAAO,EAAEC,MAAM,EAAEC,WAAW,EAAEC,aAAa,EAAEC,WAAW,EAAEC,YAAY;AAE9F,eAAe;EACbE,IAAI,EAAE,eAAe;EACrBC,UAAU,EAAE;IAAEC,SAAS,EAAEb;EAAK,CAAC;EAC/Bc,QAAQ,EAAE;IACR,GAAGf,UAAU,CAAC,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC;IAC7CgB,IAAIA,CAAA,EAAG;MACL,OAAO,IAAI,CAACC,WAAU,IAAK,CAAC,CAAC;IAC/B,CAAC;IACDC,SAASA,CAAA,EAAG;MACV,OAAO;QACLC,MAAM,EAAE,IAAI,CAACC,WAAW,CAACC,GAAG,CAACC,IAAG,IAAK,IAAI,CAACC,UAAU,CAACD,IAAI,CAACE,SAAQ,IAAKF,IAAI,CAACG,SAAQ,IAAKH,IAAI,CAACI,IAAI,CAAC,CAAC;QACpGC,QAAQ,EAAE,CACR;UACEC,KAAK,EAAE,kBAAkB;UACzBC,IAAI,EAAE,IAAI,CAACT,WAAW,CAACC,GAAG,CAACC,IAAG,IAAKA,IAAI,CAACQ,WAAW,CAAC;UACpDC,IAAI,EAAE,KAAK;UACXC,WAAW,EAAE,mBAAmB;UAChCC,OAAO,EAAE;QACX;MAEJ;IACF,CAAC;IACDC,YAAYA,CAAA,EAAG;MACb,OAAO;QACLC,UAAU,EAAE,IAAI;QAChBC,OAAO,EAAE;UACPC,MAAM,EAAE;YAAEC,OAAO,EAAE;UAAK,CAAC;UACzBC,KAAK,EAAE;YAAED,OAAO,EAAE,IAAI;YAAEE,IAAI,EAAE;UAAwB;QACxD,CAAC;QACDC,MAAM,EAAE;UACNC,CAAC,EAAE;YAAEH,KAAK,EAAE;cAAED,OAAO,EAAE,IAAI;cAAEE,IAAI,EAAE;YAAO;UAAE,CAAC;UAC7CG,CAAC,EAAE;YAAEJ,KAAK,EAAE;cAAED,OAAO,EAAE,IAAI;cAAEE,IAAI,EAAE;YAAmB;UAAE;QAC1D;MACF;IACF;EACF,CAAC;EACDI,OAAO,EAAE;IACPrB,UAAUA,CAACsB,OAAO,EAAE;MAClB,IAAI,CAACA,OAAO,EAAE,OAAO,EAAE;MACvB,MAAMnB,IAAG,GAAI,IAAIoB,IAAI,CAACD,OAAO,CAAC;MAC9B,OAAOnB,IAAI,CAACqB,cAAc,CAAC,CAAC;IAC9B;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,IAAI,CAAC5B,WAAW,CAAC6B,MAAK,KAAM,CAAC,EAAE;MACjC,IAAI,CAACC,MAAM,CAACC,QAAQ,CAAC,kBAAkB,CAAC,CAACC,KAAK,CAAC,MAAM,CAAC,CAAC;IACzD;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}