{"ast":null,"code":"export default {\n  name: 'WeatherChart3D',\n  props: {\n    weatherData: {\n      type: Array,\n      required: true\n    }\n  },\n  data() {\n    return {\n      chart: null,\n      ctx: null,\n      activeView: 'bar',\n      loading: true,\n      animationId: null\n    };\n  },\n  mounted() {\n    this.setupCanvas();\n    window.addEventListener('resize', this.handleResize);\n  },\n  beforeUnmount() {\n    window.removeEventListener('resize', this.handleResize);\n    if (this.animationId) {\n      cancelAnimationFrame(this.animationId);\n    }\n  },\n  methods: {\n    setupCanvas() {\n      this.ctx = this.$refs.chart3d.getContext('2d');\n      this.handleResize();\n      this.renderChart();\n      setTimeout(() => {\n        this.loading = false;\n      }, 800);\n    },\n    handleResize() {\n      const container = this.$refs.chart3d.parentElement;\n      this.$refs.chart3d.width = container.clientWidth;\n      this.$refs.chart3d.height = container.clientHeight;\n      this.renderChart();\n    },\n    setView(view) {\n      this.activeView = view;\n      this.renderChart();\n    },\n    renderChart() {\n      if (!this.ctx || !this.weatherData.length) return;\n\n      // Cancella il canvas\n      this.ctx.clearRect(0, 0, this.$refs.chart3d.width, this.$refs.chart3d.height);\n\n      // Imposta lo stile di base\n      this.ctx.font = '12px Arial';\n      this.ctx.textAlign = 'center';\n      if (this.activeView === 'bar') {\n        this.renderBarChart();\n      } else {\n        this.renderWaveChart();\n      }\n    },\n    renderBarChart() {\n      const canvas = this.$refs.chart3d;\n      const ctx = this.ctx;\n      const data = this.processData();\n\n      // Cancella animazione precedente\n      if (this.animationId) {\n        cancelAnimationFrame(this.animationId);\n      }\n      const margin = {\n        top: 40,\n        right: 40,\n        bottom: 60,\n        left: 60\n      };\n      const width = canvas.width - margin.left - margin.right;\n      const height = canvas.height - margin.top - margin.bottom;\n\n      // Disegna sfondo e titolo\n      ctx.fillStyle = '#f8f9fa';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Disegna assi\n      ctx.strokeStyle = '#333';\n      ctx.lineWidth = 1;\n      ctx.beginPath();\n\n      // Asse X\n      ctx.moveTo(margin.left, height + margin.top);\n      ctx.lineTo(width + margin.left, height + margin.top);\n\n      // Asse Y\n      ctx.moveTo(margin.left, margin.top);\n      ctx.lineTo(margin.left, height + margin.top);\n\n      // Asse Z (prospettiva)\n      ctx.moveTo(margin.left, height + margin.top);\n      ctx.lineTo(margin.left - 30, height + margin.top + 30);\n      ctx.stroke();\n\n      // Calcola le scale per gli assi\n      const maxTemp = Math.max(...data.map(d => d.temperature)) + 5;\n      const minTemp = Math.min(...data.map(d => d.temperature)) - 5;\n      const barWidth = Math.min(30, width / data.length * 0.7);\n\n      // Angolo per la prospettiva\n      const angle = Math.PI / 6;\n\n      // Disegna etichette asse Y (temperatura)\n      ctx.fillStyle = '#333';\n      ctx.textAlign = 'right';\n      const tempStep = Math.ceil((maxTemp - minTemp) / 5);\n      for (let i = 0; i <= 5; i++) {\n        const temp = minTemp + tempStep * i;\n        const y = height + margin.top - (temp - minTemp) / (maxTemp - minTemp) * height;\n        ctx.fillText(`${Math.round(temp)}°C`, margin.left - 5, y);\n\n        // Linee di griglia orizzontali\n        ctx.strokeStyle = '#ddd';\n        ctx.beginPath();\n        ctx.moveTo(margin.left, y);\n        ctx.lineTo(width + margin.left, y);\n        ctx.stroke();\n      }\n\n      // Variabili per l'animazione\n      let progress = 0;\n      const animate = () => {\n        // Pulisci l'area del grafico (non tutto il canvas)\n        ctx.clearRect(margin.left, margin.top, width, height);\n\n        // Ridisegna sfondo e griglia\n        ctx.fillStyle = '#f8f9fa';\n        ctx.fillRect(margin.left, margin.top, width, height);\n\n        // Ridisegna linee di griglia\n        ctx.strokeStyle = '#ddd';\n        for (let i = 0; i <= 5; i++) {\n          const temp = minTemp + tempStep * i;\n          const y = height + margin.top - (temp - minTemp) / (maxTemp - minTemp) * height;\n          ctx.beginPath();\n          ctx.moveTo(margin.left, y);\n          ctx.lineTo(width + margin.left, y);\n          ctx.stroke();\n        }\n\n        // Disegna barre 3D con animazione\n        data.forEach((d, i) => {\n          const x = margin.left + width / (data.length - 1) * i;\n          const normalizedTemp = (d.temperature - minTemp) / (maxTemp - minTemp);\n          const barHeight = normalizedTemp * height * Math.min(1, progress);\n\n          // Calcola coordinate 3D\n          const x1 = x - barWidth / 2;\n          const x2 = x + barWidth / 2;\n          const y1 = height + margin.top;\n          const y2 = y1 - barHeight;\n\n          // Profondità dell'effetto 3D\n          const depth = barWidth * 0.5;\n\n          // Colore basato sulla temperatura\n          const hue = 240 - normalizedTemp * 240; // Da blu (freddo) a rosso (caldo)\n          ctx.fillStyle = `hsl(${hue}, 80%, 60%)`;\n\n          // Faccia frontale\n          ctx.beginPath();\n          ctx.rect(x1, y2, barWidth, barHeight);\n          ctx.fill();\n\n          // Faccia superiore\n          ctx.fillStyle = `hsl(${hue}, 80%, 70%)`;\n          ctx.beginPath();\n          ctx.moveTo(x1, y2);\n          ctx.lineTo(x1 + depth * Math.cos(angle), y2 - depth * Math.sin(angle));\n          ctx.lineTo(x2 + depth * Math.cos(angle), y2 - depth * Math.sin(angle));\n          ctx.lineTo(x2, y2);\n          ctx.closePath();\n          ctx.fill();\n\n          // Faccia laterale\n          ctx.fillStyle = `hsl(${hue}, 80%, 50%)`;\n          ctx.beginPath();\n          ctx.moveTo(x2, y2);\n          ctx.lineTo(x2 + depth * Math.cos(angle), y2 - depth * Math.sin(angle));\n          ctx.lineTo(x2 + depth * Math.cos(angle), y1 - depth * Math.sin(angle));\n          ctx.lineTo(x2, y1);\n          ctx.closePath();\n          ctx.fill();\n\n          // Etichetta città\n          if (i % Math.ceil(data.length / 10) === 0) {\n            ctx.fillStyle = '#333';\n            ctx.textAlign = 'center';\n            ctx.save();\n            ctx.translate(x, y1 + 15);\n            ctx.rotate(Math.PI / 4); // Ruota per evitare sovrapposizioni\n            ctx.fillText(d.city, 0, 0);\n            ctx.restore();\n          }\n        });\n\n        // Incrementa progresso animazione\n        progress += 0.05;\n        if (progress < 1) {\n          this.animationId = requestAnimationFrame(animate);\n        }\n      };\n\n      // Avvia animazione\n      this.animationId = requestAnimationFrame(animate);\n    },\n    renderWaveChart() {\n      const canvas = this.$refs.chart3d;\n      const ctx = this.ctx;\n      const data = this.processData();\n\n      // Cancella animazione precedente\n      if (this.animationId) {\n        cancelAnimationFrame(this.animationId);\n      }\n      const margin = {\n        top: 40,\n        right: 40,\n        bottom: 60,\n        left: 60\n      };\n      const width = canvas.width - margin.left - margin.right;\n      const height = canvas.height - margin.top - margin.bottom;\n\n      // Disegna sfondo\n      ctx.fillStyle = '#f8f9fa';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Scala per le temperature\n      const maxTemp = Math.max(...data.map(d => d.temperature)) + 5;\n      const minTemp = Math.min(...data.map(d => d.temperature)) - 5;\n\n      // Variabili per l'animazione dell'onda\n      let time = 0;\n      const amplitude = 10;\n\n      // Funzione di animazione\n      const animate = () => {\n        // Pulisci l'area del grafico\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n        // Ridisegna sfondo\n        ctx.fillStyle = '#f8f9fa';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n        // Disegna assi e griglie come nel grafico a barre\n        ctx.strokeStyle = '#333';\n        ctx.lineWidth = 1;\n        ctx.beginPath();\n        ctx.moveTo(margin.left, height + margin.top);\n        ctx.lineTo(width + margin.left, height + margin.top);\n        ctx.moveTo(margin.left, margin.top);\n        ctx.lineTo(margin.left, height + margin.top);\n        ctx.stroke();\n\n        // Disegna etichette asse Y (temperatura)\n        ctx.fillStyle = '#333';\n        ctx.textAlign = 'right';\n        const tempStep = Math.ceil((maxTemp - minTemp) / 5);\n        for (let i = 0; i <= 5; i++) {\n          const temp = minTemp + tempStep * i;\n          const y = height + margin.top - (temp - minTemp) / (maxTemp - minTemp) * height;\n          ctx.fillText(`${Math.round(temp)}°C`, margin.left - 5, y);\n\n          // Linee di griglia orizzontali\n          ctx.strokeStyle = '#ddd';\n          ctx.beginPath();\n          ctx.moveTo(margin.left, y);\n          ctx.lineTo(width + margin.left, y);\n          ctx.stroke();\n        }\n\n        // Crea superficie 3D\n        const gridSize = Math.min(50, data.length);\n        const cellWidth = width / gridSize;\n        const cellHeight = height / gridSize;\n        for (let i = 0; i < gridSize; i++) {\n          for (let j = 0; j < gridSize; j++) {\n            // Coordinate nel piano\n            const x = margin.left + cellWidth * i;\n            const y = margin.top + cellHeight * j;\n\n            // Calcola il valore dell'onda per questa cella\n            const distanceFromCenter = Math.sqrt(Math.pow((i - gridSize / 2) / (gridSize / 2), 2) + Math.pow((j - gridSize / 2) / (gridSize / 2), 2));\n\n            // Combinazione di onde\n            const wave1 = Math.sin(distanceFromCenter * 5 + time) * amplitude;\n            const wave2 = Math.cos(distanceFromCenter * 3 - time * 0.5) * amplitude;\n            const wave = wave1 + wave2;\n\n            // Normalizza per avere un valore di colore\n            const normalizedWave = (wave + 2 * amplitude) / (4 * amplitude);\n\n            // Colore basato sulla \"temperatura\" dell'onda\n            const hue = 240 - normalizedWave * 240;\n            ctx.fillStyle = `hsla(${hue}, 80%, 60%, 0.7)`;\n\n            // Disegna la cella\n            ctx.beginPath();\n            ctx.rect(x, y, cellWidth + 1, cellHeight + 1); // +1 per evitare spazi vuoti\n            ctx.fill();\n          }\n        }\n\n        // Disegna linea del profilo dei dati\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.8)';\n        ctx.lineWidth = 3;\n        ctx.beginPath();\n        ctx.moveTo(margin.left, height + margin.top - (data[0].temperature - minTemp) / (maxTemp - minTemp) * height);\n        for (let i = 1; i < data.length; i++) {\n          const x = margin.left + width / (data.length - 1) * i;\n          const normalizedTemp = (data[i].temperature - minTemp) / (maxTemp - minTemp);\n          const y = height + margin.top - normalizedTemp * height;\n          ctx.lineTo(x, y);\n        }\n        ctx.stroke();\n\n        // Disegna punti dati\n        data.forEach((d, i) => {\n          const x = margin.left + width / (data.length - 1) * i;\n          const normalizedTemp = (d.temperature - minTemp) / (maxTemp - minTemp);\n          const y = height + margin.top - normalizedTemp * height;\n          const hue = 240 - normalizedTemp * 240;\n\n          // Punto\n          ctx.fillStyle = `hsl(${hue}, 80%, 50%)`;\n          ctx.beginPath();\n          ctx.arc(x, y, 5, 0, Math.PI * 2);\n          ctx.fill();\n\n          // Etichetta città (solo alcune per evitare sovrapposizioni)\n          if (i % Math.ceil(data.length / 6) === 0) {\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n            ctx.textAlign = 'center';\n            ctx.fillText(d.city, x, y - 15);\n          }\n        });\n\n        // Incrementa il tempo per l'animazione\n        time += 0.05;\n        this.animationId = requestAnimationFrame(animate);\n      };\n\n      // Avvia animazione\n      this.animationId = requestAnimationFrame(animate);\n    },\n    processData() {\n      // Elabora e prepara i dati per la visualizzazione\n      return this.weatherData.filter(item => item.temperature !== undefined).map(item => ({\n        city: item.city,\n        temperature: parseFloat(item.temperature),\n        description: item.description\n      }));\n    }\n  },\n  watch: {\n    weatherData: {\n      handler() {\n        this.renderChart();\n      },\n      deep: true\n    }\n  }\n};","map":{"version":3,"names":["name","props","weatherData","type","Array","required","data","chart","ctx","activeView","loading","animationId","mounted","setupCanvas","window","addEventListener","handleResize","beforeUnmount","removeEventListener","cancelAnimationFrame","methods","$refs","chart3d","getContext","renderChart","setTimeout","container","parentElement","width","clientWidth","height","clientHeight","setView","view","length","clearRect","font","textAlign","renderBarChart","renderWaveChart","canvas","processData","margin","top","right","bottom","left","fillStyle","fillRect","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","maxTemp","Math","max","map","d","temperature","minTemp","min","barWidth","angle","PI","tempStep","ceil","i","temp","y","fillText","round","progress","animate","forEach","x","normalizedTemp","barHeight","x1","x2","y1","y2","depth","hue","rect","fill","cos","sin","closePath","save","translate","rotate","city","restore","requestAnimationFrame","time","amplitude","gridSize","cellWidth","cellHeight","j","distanceFromCenter","sqrt","pow","wave1","wave2","wave","normalizedWave","arc","filter","item","undefined","parseFloat","description","watch","handler","deep"],"sources":["C:\\Users\\Giovanni\\OneDrive\\Desktop\\Scuola\\TPI\\progetto meteo\\frontend\\src\\components\\WeatherChart3D.vue"],"sourcesContent":["<template>\r\n  <div class=\"chart-3d-container\">\r\n    <div class=\"chart-3d-controls mb-3 d-flex justify-content-between align-items-center\">\r\n      <h5 class=\"mb-0\">Grafico 3D Temperatura</h5>\r\n      <div class=\"btn-group\">\r\n        <button \r\n          class=\"btn btn-sm\" \r\n          :class=\"{'btn-primary': activeView === 'bar', 'btn-outline-primary': activeView !== 'bar'}\"\r\n          @click=\"setView('bar')\"\r\n        >\r\n          <i class=\"fas fa-chart-bar me-1\"></i> Barre\r\n        </button>\r\n        <button \r\n          class=\"btn btn-sm\" \r\n          :class=\"{'btn-primary': activeView === 'wave', 'btn-outline-primary': activeView !== 'wave'}\"\r\n          @click=\"setView('wave')\"\r\n        >\r\n          <i class=\"fas fa-water me-1\"></i> Onde\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <div class=\"chart-3d-canvas-container\">\r\n      <canvas ref=\"chart3d\" class=\"chart-3d-canvas\"></canvas>\r\n      <div v-if=\"loading\" class=\"chart-loading\">\r\n        <div class=\"spinner-border text-primary\" role=\"status\">\r\n          <span class=\"visually-hidden\">Caricamento...</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'WeatherChart3D',\r\n  props: {\r\n    weatherData: {\r\n      type: Array,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      chart: null,\r\n      ctx: null,\r\n      activeView: 'bar',\r\n      loading: true,\r\n      animationId: null\r\n    }\r\n  },\r\n  mounted() {\r\n    this.setupCanvas();\r\n    window.addEventListener('resize', this.handleResize);\r\n  },\r\n  beforeUnmount() {\r\n    window.removeEventListener('resize', this.handleResize);\r\n    if (this.animationId) {\r\n      cancelAnimationFrame(this.animationId);\r\n    }\r\n  },\r\n  methods: {\r\n    setupCanvas() {\r\n      this.ctx = this.$refs.chart3d.getContext('2d');\r\n      this.handleResize();\r\n      this.renderChart();\r\n      setTimeout(() => {\r\n        this.loading = false;\r\n      }, 800);\r\n    },\r\n    handleResize() {\r\n      const container = this.$refs.chart3d.parentElement;\r\n      this.$refs.chart3d.width = container.clientWidth;\r\n      this.$refs.chart3d.height = container.clientHeight;\r\n      this.renderChart();\r\n    },\r\n    setView(view) {\r\n      this.activeView = view;\r\n      this.renderChart();\r\n    },\r\n    renderChart() {\r\n      if (!this.ctx || !this.weatherData.length) return;\r\n      \r\n      // Cancella il canvas\r\n      this.ctx.clearRect(0, 0, this.$refs.chart3d.width, this.$refs.chart3d.height);\r\n      \r\n      // Imposta lo stile di base\r\n      this.ctx.font = '12px Arial';\r\n      this.ctx.textAlign = 'center';\r\n      \r\n      if (this.activeView === 'bar') {\r\n        this.renderBarChart();\r\n      } else {\r\n        this.renderWaveChart();\r\n      }\r\n    },\r\n    renderBarChart() {\r\n      const canvas = this.$refs.chart3d;\r\n      const ctx = this.ctx;\r\n      const data = this.processData();\r\n      \r\n      // Cancella animazione precedente\r\n      if (this.animationId) {\r\n        cancelAnimationFrame(this.animationId);\r\n      }\r\n      \r\n      const margin = { top: 40, right: 40, bottom: 60, left: 60 };\r\n      const width = canvas.width - margin.left - margin.right;\r\n      const height = canvas.height - margin.top - margin.bottom;\r\n      \r\n      // Disegna sfondo e titolo\r\n      ctx.fillStyle = '#f8f9fa';\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n      \r\n      // Disegna assi\r\n      ctx.strokeStyle = '#333';\r\n      ctx.lineWidth = 1;\r\n      ctx.beginPath();\r\n      \r\n      // Asse X\r\n      ctx.moveTo(margin.left, height + margin.top);\r\n      ctx.lineTo(width + margin.left, height + margin.top);\r\n      \r\n      // Asse Y\r\n      ctx.moveTo(margin.left, margin.top);\r\n      ctx.lineTo(margin.left, height + margin.top);\r\n      \r\n      // Asse Z (prospettiva)\r\n      ctx.moveTo(margin.left, height + margin.top);\r\n      ctx.lineTo(margin.left - 30, height + margin.top + 30);\r\n      \r\n      ctx.stroke();\r\n      \r\n      // Calcola le scale per gli assi\r\n      const maxTemp = Math.max(...data.map(d => d.temperature)) + 5;\r\n      const minTemp = Math.min(...data.map(d => d.temperature)) - 5;\r\n      const barWidth = Math.min(30, (width / data.length) * 0.7);\r\n      \r\n      // Angolo per la prospettiva\r\n      const angle = Math.PI / 6;\r\n      \r\n      // Disegna etichette asse Y (temperatura)\r\n      ctx.fillStyle = '#333';\r\n      ctx.textAlign = 'right';\r\n      const tempStep = Math.ceil((maxTemp - minTemp) / 5);\r\n      for (let i = 0; i <= 5; i++) {\r\n        const temp = minTemp + (tempStep * i);\r\n        const y = height + margin.top - ((temp - minTemp) / (maxTemp - minTemp) * height);\r\n        ctx.fillText(`${Math.round(temp)}°C`, margin.left - 5, y);\r\n        \r\n        // Linee di griglia orizzontali\r\n        ctx.strokeStyle = '#ddd';\r\n        ctx.beginPath();\r\n        ctx.moveTo(margin.left, y);\r\n        ctx.lineTo(width + margin.left, y);\r\n        ctx.stroke();\r\n      }\r\n      \r\n      // Variabili per l'animazione\r\n      let progress = 0;\r\n      const animate = () => {\r\n        // Pulisci l'area del grafico (non tutto il canvas)\r\n        ctx.clearRect(margin.left, margin.top, width, height);\r\n        \r\n        // Ridisegna sfondo e griglia\r\n        ctx.fillStyle = '#f8f9fa';\r\n        ctx.fillRect(margin.left, margin.top, width, height);\r\n        \r\n        // Ridisegna linee di griglia\r\n        ctx.strokeStyle = '#ddd';\r\n        for (let i = 0; i <= 5; i++) {\r\n          const temp = minTemp + (tempStep * i);\r\n          const y = height + margin.top - ((temp - minTemp) / (maxTemp - minTemp) * height);\r\n          ctx.beginPath();\r\n          ctx.moveTo(margin.left, y);\r\n          ctx.lineTo(width + margin.left, y);\r\n          ctx.stroke();\r\n        }\r\n        \r\n        // Disegna barre 3D con animazione\r\n        data.forEach((d, i) => {\r\n          const x = margin.left + ((width / (data.length - 1)) * i);\r\n          const normalizedTemp = (d.temperature - minTemp) / (maxTemp - minTemp);\r\n          const barHeight = normalizedTemp * height * Math.min(1, progress);\r\n          \r\n          // Calcola coordinate 3D\r\n          const x1 = x - barWidth / 2;\r\n          const x2 = x + barWidth / 2;\r\n          const y1 = height + margin.top;\r\n          const y2 = y1 - barHeight;\r\n          \r\n          // Profondità dell'effetto 3D\r\n          const depth = barWidth * 0.5;\r\n          \r\n          // Colore basato sulla temperatura\r\n          const hue = 240 - (normalizedTemp * 240); // Da blu (freddo) a rosso (caldo)\r\n          ctx.fillStyle = `hsl(${hue}, 80%, 60%)`;\r\n          \r\n          // Faccia frontale\r\n          ctx.beginPath();\r\n          ctx.rect(x1, y2, barWidth, barHeight);\r\n          ctx.fill();\r\n          \r\n          // Faccia superiore\r\n          ctx.fillStyle = `hsl(${hue}, 80%, 70%)`;\r\n          ctx.beginPath();\r\n          ctx.moveTo(x1, y2);\r\n          ctx.lineTo(x1 + depth * Math.cos(angle), y2 - depth * Math.sin(angle));\r\n          ctx.lineTo(x2 + depth * Math.cos(angle), y2 - depth * Math.sin(angle));\r\n          ctx.lineTo(x2, y2);\r\n          ctx.closePath();\r\n          ctx.fill();\r\n          \r\n          // Faccia laterale\r\n          ctx.fillStyle = `hsl(${hue}, 80%, 50%)`;\r\n          ctx.beginPath();\r\n          ctx.moveTo(x2, y2);\r\n          ctx.lineTo(x2 + depth * Math.cos(angle), y2 - depth * Math.sin(angle));\r\n          ctx.lineTo(x2 + depth * Math.cos(angle), y1 - depth * Math.sin(angle));\r\n          ctx.lineTo(x2, y1);\r\n          ctx.closePath();\r\n          ctx.fill();\r\n          \r\n          // Etichetta città\r\n          if (i % Math.ceil(data.length / 10) === 0) {\r\n            ctx.fillStyle = '#333';\r\n            ctx.textAlign = 'center';\r\n            ctx.save();\r\n            ctx.translate(x, y1 + 15);\r\n            ctx.rotate(Math.PI / 4); // Ruota per evitare sovrapposizioni\r\n            ctx.fillText(d.city, 0, 0);\r\n            ctx.restore();\r\n          }\r\n        });\r\n        \r\n        // Incrementa progresso animazione\r\n        progress += 0.05;\r\n        if (progress < 1) {\r\n          this.animationId = requestAnimationFrame(animate);\r\n        }\r\n      };\r\n      \r\n      // Avvia animazione\r\n      this.animationId = requestAnimationFrame(animate);\r\n    },\r\n    renderWaveChart() {\r\n      const canvas = this.$refs.chart3d;\r\n      const ctx = this.ctx;\r\n      const data = this.processData();\r\n      \r\n      // Cancella animazione precedente\r\n      if (this.animationId) {\r\n        cancelAnimationFrame(this.animationId);\r\n      }\r\n      \r\n      const margin = { top: 40, right: 40, bottom: 60, left: 60 };\r\n      const width = canvas.width - margin.left - margin.right;\r\n      const height = canvas.height - margin.top - margin.bottom;\r\n      \r\n      // Disegna sfondo\r\n      ctx.fillStyle = '#f8f9fa';\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n      \r\n      // Scala per le temperature\r\n      const maxTemp = Math.max(...data.map(d => d.temperature)) + 5;\r\n      const minTemp = Math.min(...data.map(d => d.temperature)) - 5;\r\n      \r\n      // Variabili per l'animazione dell'onda\r\n      let time = 0;\r\n      const amplitude = 10;\r\n      \r\n      // Funzione di animazione\r\n      const animate = () => {\r\n        // Pulisci l'area del grafico\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        \r\n        // Ridisegna sfondo\r\n        ctx.fillStyle = '#f8f9fa';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n        \r\n        // Disegna assi e griglie come nel grafico a barre\r\n        ctx.strokeStyle = '#333';\r\n        ctx.lineWidth = 1;\r\n        ctx.beginPath();\r\n        ctx.moveTo(margin.left, height + margin.top);\r\n        ctx.lineTo(width + margin.left, height + margin.top);\r\n        ctx.moveTo(margin.left, margin.top);\r\n        ctx.lineTo(margin.left, height + margin.top);\r\n        ctx.stroke();\r\n        \r\n        // Disegna etichette asse Y (temperatura)\r\n        ctx.fillStyle = '#333';\r\n        ctx.textAlign = 'right';\r\n        const tempStep = Math.ceil((maxTemp - minTemp) / 5);\r\n        for (let i = 0; i <= 5; i++) {\r\n          const temp = minTemp + (tempStep * i);\r\n          const y = height + margin.top - ((temp - minTemp) / (maxTemp - minTemp) * height);\r\n          ctx.fillText(`${Math.round(temp)}°C`, margin.left - 5, y);\r\n          \r\n          // Linee di griglia orizzontali\r\n          ctx.strokeStyle = '#ddd';\r\n          ctx.beginPath();\r\n          ctx.moveTo(margin.left, y);\r\n          ctx.lineTo(width + margin.left, y);\r\n          ctx.stroke();\r\n        }\r\n        \r\n        // Crea superficie 3D\r\n        const gridSize = Math.min(50, data.length);\r\n        const cellWidth = width / gridSize;\r\n        const cellHeight = height / gridSize;\r\n        \r\n        for (let i = 0; i < gridSize; i++) {\r\n          for (let j = 0; j < gridSize; j++) {\r\n            // Coordinate nel piano\r\n            const x = margin.left + (cellWidth * i);\r\n            const y = margin.top + (cellHeight * j);\r\n            \r\n            // Calcola il valore dell'onda per questa cella\r\n            const distanceFromCenter = Math.sqrt(\r\n              Math.pow((i - gridSize / 2) / (gridSize / 2), 2) + \r\n              Math.pow((j - gridSize / 2) / (gridSize / 2), 2)\r\n            );\r\n            \r\n            // Combinazione di onde\r\n            const wave1 = Math.sin(distanceFromCenter * 5 + time) * amplitude;\r\n            const wave2 = Math.cos(distanceFromCenter * 3 - time * 0.5) * amplitude;\r\n            const wave = wave1 + wave2;\r\n            \r\n            // Normalizza per avere un valore di colore\r\n            const normalizedWave = (wave + 2 * amplitude) / (4 * amplitude);\r\n            \r\n            // Colore basato sulla \"temperatura\" dell'onda\r\n            const hue = 240 - (normalizedWave * 240);\r\n            ctx.fillStyle = `hsla(${hue}, 80%, 60%, 0.7)`;\r\n            \r\n            // Disegna la cella\r\n            ctx.beginPath();\r\n            ctx.rect(x, y, cellWidth + 1, cellHeight + 1); // +1 per evitare spazi vuoti\r\n            ctx.fill();\r\n          }\r\n        }\r\n        \r\n        // Disegna linea del profilo dei dati\r\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.8)';\r\n        ctx.lineWidth = 3;\r\n        ctx.beginPath();\r\n        ctx.moveTo(margin.left, height + margin.top - ((data[0].temperature - minTemp) / (maxTemp - minTemp) * height));\r\n        \r\n        for (let i = 1; i < data.length; i++) {\r\n          const x = margin.left + ((width / (data.length - 1)) * i);\r\n          const normalizedTemp = (data[i].temperature - minTemp) / (maxTemp - minTemp);\r\n          const y = height + margin.top - (normalizedTemp * height);\r\n          \r\n          ctx.lineTo(x, y);\r\n        }\r\n        ctx.stroke();\r\n        \r\n        // Disegna punti dati\r\n        data.forEach((d, i) => {\r\n          const x = margin.left + ((width / (data.length - 1)) * i);\r\n          const normalizedTemp = (d.temperature - minTemp) / (maxTemp - minTemp);\r\n          const y = height + margin.top - (normalizedTemp * height);\r\n          \r\n          const hue = 240 - (normalizedTemp * 240);\r\n          \r\n          // Punto\r\n          ctx.fillStyle = `hsl(${hue}, 80%, 50%)`;\r\n          ctx.beginPath();\r\n          ctx.arc(x, y, 5, 0, Math.PI * 2);\r\n          ctx.fill();\r\n          \r\n          // Etichetta città (solo alcune per evitare sovrapposizioni)\r\n          if (i % Math.ceil(data.length / 6) === 0) {\r\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\r\n            ctx.textAlign = 'center';\r\n            ctx.fillText(d.city, x, y - 15);\r\n          }\r\n        });\r\n        \r\n        // Incrementa il tempo per l'animazione\r\n        time += 0.05;\r\n        this.animationId = requestAnimationFrame(animate);\r\n      };\r\n      \r\n      // Avvia animazione\r\n      this.animationId = requestAnimationFrame(animate);\r\n    },\r\n    processData() {\r\n      // Elabora e prepara i dati per la visualizzazione\r\n      return this.weatherData\r\n        .filter(item => item.temperature !== undefined)\r\n        .map(item => ({\r\n          city: item.city,\r\n          temperature: parseFloat(item.temperature),\r\n          description: item.description\r\n        }));\r\n    }\r\n  },\r\n  watch: {\r\n    weatherData: {\r\n      handler() {\r\n        this.renderChart();\r\n      },\r\n      deep: true\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.chart-3d-container {\r\n  width: 100%;\r\n  position: relative;\r\n  background-color: white;\r\n  border-radius: 0.75rem;\r\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\r\n  padding: 1rem;\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.chart-3d-canvas-container {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 400px;\r\n}\r\n\r\n.chart-3d-canvas {\r\n  display: block;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.chart-loading {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: rgba(255, 255, 255, 0.7);\r\n  z-index: 10;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}