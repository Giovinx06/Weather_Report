{"ast":null,"code":"import { createRouter, createWebHistory } from 'vue-router';\nimport HomeView from '../views/HomeView.vue';\nimport store from '../store';\nconst routes = [{\n  path: '/',\n  name: 'home',\n  component: HomeView\n}, {\n  path: '/login',\n  name: 'login',\n  component: () => import('../views/LoginView.vue')\n}, {\n  path: '/register',\n  name: 'register',\n  component: () => import('../views/RegisterView.vue')\n}, {\n  path: '/dashboard',\n  name: 'dashboard',\n  component: () => import('../views/DashboardView.vue'),\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: '/weather',\n  name: 'weather',\n  component: () => import('../views/WeatherView.vue'),\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: '/profile',\n  name: 'profile',\n  component: () => import('../views/ProfileView.vue'),\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: '/admin',\n  name: 'admin',\n  component: () => import('../views/AdminView.vue'),\n  meta: {\n    requiresAuth: true,\n    requiresAdmin: true\n  }\n}];\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n});\n\n// Protezione delle rotte\nrouter.beforeEach((to, from, next) => {\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    // Verifica se l'utente è autenticato\n    if (!store.getters.isLoggedIn) {\n      next({\n        path: '/login',\n        query: {\n          redirect: to.fullPath\n        }\n      });\n    } else {\n      // Verifica ruolo admin se necessario\n      if (to.matched.some(record => record.meta.requiresAdmin)) {\n        if (store.getters.isAdmin) {\n          next();\n        } else {\n          next({\n            path: '/'\n          });\n        }\n      } else {\n        next();\n      }\n    }\n  } else {\n    next();\n  }\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","HomeView","store","routes","path","name","component","meta","requiresAuth","requiresAdmin","router","history","process","env","BASE_URL","beforeEach","to","from","next","matched","some","record","getters","isLoggedIn","query","redirect","fullPath","isAdmin"],"sources":["C:/Programmazione/Wheater_Report/progetto/frontend/src/router/index.js"],"sourcesContent":["import { createRouter, createWebHistory } from 'vue-router'\r\nimport HomeView from '../views/HomeView.vue'\r\nimport store from '../store'\r\n\r\nconst routes = [\r\n  {\r\n    path: '/',\r\n    name: 'home',\r\n    component: HomeView\r\n  },\r\n  {\r\n    path: '/login',\r\n    name: 'login',\r\n    component: () => import('../views/LoginView.vue')\r\n  },\r\n  {\r\n    path: '/register',\r\n    name: 'register',\r\n    component: () => import('../views/RegisterView.vue')\r\n  },\r\n  {\r\n    path: '/dashboard',\r\n    name: 'dashboard',\r\n    component: () => import('../views/DashboardView.vue'),\r\n    meta: { requiresAuth: true }\r\n  },\r\n  {\r\n    path: '/weather',\r\n    name: 'weather',\r\n    component: () => import('../views/WeatherView.vue'),\r\n    meta: { requiresAuth: true }\r\n  },\r\n  {\r\n    path: '/profile',\r\n    name: 'profile',\r\n    component: () => import('../views/ProfileView.vue'),\r\n    meta: { requiresAuth: true }\r\n  },\r\n  {\r\n    path: '/admin',\r\n    name: 'admin',\r\n    component: () => import('../views/AdminView.vue'),\r\n    meta: { requiresAuth: true, requiresAdmin: true }\r\n  }\r\n]\r\n\r\nconst router = createRouter({\r\n  history: createWebHistory(process.env.BASE_URL),\r\n  routes\r\n})\r\n\r\n// Protezione delle rotte\r\nrouter.beforeEach((to, from, next) => {\r\n  if (to.matched.some(record => record.meta.requiresAuth)) {\r\n    // Verifica se l'utente è autenticato\r\n    if (!store.getters.isLoggedIn) {\r\n      next({\r\n        path: '/login',\r\n        query: { redirect: to.fullPath }\r\n      })\r\n    } else {\r\n      // Verifica ruolo admin se necessario\r\n      if (to.matched.some(record => record.meta.requiresAdmin)) {\r\n        if (store.getters.isAdmin) {\r\n          next()\r\n        } else {\r\n          next({ path: '/' })\r\n        }\r\n      } else {\r\n        next()\r\n      }\r\n    }\r\n  } else {\r\n    next()\r\n  }\r\n})\r\n\r\nexport default router "],"mappings":"AAAA,SAASA,YAAY,EAAEC,gBAAgB,QAAQ,YAAY;AAC3D,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,KAAK,MAAM,UAAU;AAE5B,MAAMC,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,MAAM;EACZC,SAAS,EAAEL;AACb,CAAC,EACD;EACEG,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,wBAAwB;AAClD,CAAC,EACD;EACEF,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE,UAAU;EAChBC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,2BAA2B;AACrD,CAAC,EACD;EACEF,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE,WAAW;EACjBC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,4BAA4B,CAAC;EACrDC,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK;AAC7B,CAAC,EACD;EACEJ,IAAI,EAAE,UAAU;EAChBC,IAAI,EAAE,SAAS;EACfC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,0BAA0B,CAAC;EACnDC,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK;AAC7B,CAAC,EACD;EACEJ,IAAI,EAAE,UAAU;EAChBC,IAAI,EAAE,SAAS;EACfC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,0BAA0B,CAAC;EACnDC,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK;AAC7B,CAAC,EACD;EACEJ,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,wBAAwB,CAAC;EACjDC,IAAI,EAAE;IAAEC,YAAY,EAAE,IAAI;IAAEC,aAAa,EAAE;EAAK;AAClD,CAAC,CACF;AAED,MAAMC,MAAM,GAAGX,YAAY,CAAC;EAC1BY,OAAO,EAAEX,gBAAgB,CAACY,OAAO,CAACC,GAAG,CAACC,QAAQ,CAAC;EAC/CX;AACF,CAAC,CAAC;;AAEF;AACAO,MAAM,CAACK,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpC,IAAIF,EAAE,CAACG,OAAO,CAACC,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACd,IAAI,CAACC,YAAY,CAAC,EAAE;IACvD;IACA,IAAI,CAACN,KAAK,CAACoB,OAAO,CAACC,UAAU,EAAE;MAC7BL,IAAI,CAAC;QACHd,IAAI,EAAE,QAAQ;QACdoB,KAAK,EAAE;UAAEC,QAAQ,EAAET,EAAE,CAACU;QAAS;MACjC,CAAC,CAAC;IACJ,CAAC,MAAM;MACL;MACA,IAAIV,EAAE,CAACG,OAAO,CAACC,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACd,IAAI,CAACE,aAAa,CAAC,EAAE;QACxD,IAAIP,KAAK,CAACoB,OAAO,CAACK,OAAO,EAAE;UACzBT,IAAI,CAAC,CAAC;QACR,CAAC,MAAM;UACLA,IAAI,CAAC;YAAEd,IAAI,EAAE;UAAI,CAAC,CAAC;QACrB;MACF,CAAC,MAAM;QACLc,IAAI,CAAC,CAAC;MACR;IACF;EACF,CAAC,MAAM;IACLA,IAAI,CAAC,CAAC;EACR;AACF,CAAC,CAAC;AAEF,eAAeR,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}