{"ast":null,"code":"import { createStore } from 'vuex';\nimport axios from 'axios';\n\n// API base URL\nconst API_URL = 'http://localhost:3000/api';\nexport default createStore({\n  state: {\n    status: '',\n    token: localStorage.getItem('token') || sessionStorage.getItem('token') || '',\n    user: JSON.parse(localStorage.getItem('user')) || JSON.parse(sessionStorage.getItem('user') || '{}'),\n    weatherData: []\n  },\n  getters: {\n    isLoggedIn: state => !!state.token,\n    authStatus: state => state.status,\n    currentUser: state => state.user,\n    isAdmin: state => state.user && state.user.role === 'admin',\n    weatherData: state => state.weatherData\n  },\n  mutations: {\n    AUTH_REQUEST(state) {\n      state.status = 'loading';\n    },\n    AUTH_SUCCESS(state, {\n      token,\n      user\n    }) {\n      state.status = 'success';\n      state.token = token;\n      state.user = user;\n    },\n    AUTH_ERROR(state) {\n      state.status = 'error';\n    },\n    LOGOUT(state) {\n      state.status = '';\n      state.token = '';\n      state.user = {};\n    },\n    SET_WEATHER_DATA(state, data) {\n      state.weatherData = data;\n    }\n  },\n  actions: {\n    // Login\n    login({\n      commit\n    }, userData) {\n      return new Promise((resolve, reject) => {\n        commit('AUTH_REQUEST');\n        axios.post(`${API_URL}/auth/login`, {\n          username: userData.username,\n          password: userData.password\n        }).then(resp => {\n          const token = resp.data.token;\n          const user = resp.data.user;\n\n          // Se rememberMe è true, usa localStorage (persiste anche dopo chiusura browser)\n          // Altrimenti usa sessionStorage (persiste solo per la sessione corrente)\n          const storage = userData.rememberMe ? localStorage : sessionStorage;\n          storage.setItem('token', token);\n          storage.setItem('user', JSON.stringify(user));\n\n          // Imposta il token nell'header per le future richieste API\n          axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n          commit('AUTH_SUCCESS', {\n            token,\n            user\n          });\n          resolve(resp);\n        }).catch(err => {\n          commit('AUTH_ERROR');\n          localStorage.removeItem('token');\n          localStorage.removeItem('user');\n          sessionStorage.removeItem('token');\n          sessionStorage.removeItem('user');\n          reject(err);\n        });\n      });\n    },\n    // Registrazione\n    register({\n      commit\n    }, user) {\n      return new Promise((resolve, reject) => {\n        commit('AUTH_REQUEST');\n        axios.post(`${API_URL}/auth/register`, user).then(resp => {\n          resolve(resp);\n        }).catch(err => {\n          commit('AUTH_ERROR');\n          reject(err);\n        });\n      });\n    },\n    // Logout\n    logout({\n      commit\n    }) {\n      return new Promise(resolve => {\n        commit('LOGOUT');\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        sessionStorage.removeItem('token');\n        sessionStorage.removeItem('user');\n        delete axios.defaults.headers.common['Authorization'];\n        resolve();\n      });\n    },\n    // Recupera dati meteo\n    fetchWeatherData({\n      commit\n    }) {\n      return new Promise((resolve, reject) => {\n        axios.get(`${API_URL}/data/weather`).then(resp => {\n          commit('SET_WEATHER_DATA', resp.data);\n          resolve(resp);\n        }).catch(err => {\n          reject(err);\n        });\n      });\n    },\n    // Recupera nuovi dati meteo da API esterna\n    fetchNewWeatherData(_, city) {\n      return new Promise((resolve, reject) => {\n        axios.post(`${API_URL}/data/weather/fetch`, {\n          city\n        }).then(resp => {\n          resolve(resp);\n        }).catch(err => {\n          reject(err);\n        });\n      });\n    }\n  }\n});","map":{"version":3,"names":["createStore","axios","API_URL","state","status","token","localStorage","getItem","sessionStorage","user","JSON","parse","weatherData","getters","isLoggedIn","authStatus","currentUser","isAdmin","role","mutations","AUTH_REQUEST","AUTH_SUCCESS","AUTH_ERROR","LOGOUT","SET_WEATHER_DATA","data","actions","login","commit","userData","Promise","resolve","reject","post","username","password","then","resp","storage","rememberMe","setItem","stringify","defaults","headers","common","catch","err","removeItem","register","logout","fetchWeatherData","get","fetchNewWeatherData","_","city"],"sources":["C:/Users/Giovanni/OneDrive/Desktop/Scuola/TPI/progetto meteo/frontend/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\r\nimport axios from 'axios'\r\n\r\n// API base URL\r\nconst API_URL = 'http://localhost:3000/api'\r\n\r\nexport default createStore({\r\n  state: {\r\n    status: '',\r\n    token: localStorage.getItem('token') || sessionStorage.getItem('token') || '',\r\n    user: JSON.parse(localStorage.getItem('user')) || JSON.parse(sessionStorage.getItem('user') || '{}'),\r\n    weatherData: []\r\n  },\r\n  getters: {\r\n    isLoggedIn: state => !!state.token,\r\n    authStatus: state => state.status,\r\n    currentUser: state => state.user,\r\n    isAdmin: state => state.user && state.user.role === 'admin',\r\n    weatherData: state => state.weatherData\r\n  },\r\n  mutations: {\r\n    AUTH_REQUEST(state) {\r\n      state.status = 'loading'\r\n    },\r\n    AUTH_SUCCESS(state, { token, user }) {\r\n      state.status = 'success'\r\n      state.token = token\r\n      state.user = user\r\n    },\r\n    AUTH_ERROR(state) {\r\n      state.status = 'error'\r\n    },\r\n    LOGOUT(state) {\r\n      state.status = ''\r\n      state.token = ''\r\n      state.user = {}\r\n    },\r\n    SET_WEATHER_DATA(state, data) {\r\n      state.weatherData = data\r\n    }\r\n  },\r\n  actions: {\r\n    // Login\r\n    login({ commit }, userData) {\r\n      return new Promise((resolve, reject) => {\r\n        commit('AUTH_REQUEST')\r\n        axios.post(`${API_URL}/auth/login`, { \r\n          username: userData.username, \r\n          password: userData.password \r\n        })\r\n          .then(resp => {\r\n            const token = resp.data.token\r\n            const user = resp.data.user\r\n            \r\n            // Se rememberMe è true, usa localStorage (persiste anche dopo chiusura browser)\r\n            // Altrimenti usa sessionStorage (persiste solo per la sessione corrente)\r\n            const storage = userData.rememberMe ? localStorage : sessionStorage\r\n            \r\n            storage.setItem('token', token)\r\n            storage.setItem('user', JSON.stringify(user))\r\n            \r\n            // Imposta il token nell'header per le future richieste API\r\n            axios.defaults.headers.common['Authorization'] = `Bearer ${token}`\r\n            commit('AUTH_SUCCESS', { token, user })\r\n            resolve(resp)\r\n          })\r\n          .catch(err => {\r\n            commit('AUTH_ERROR')\r\n            localStorage.removeItem('token')\r\n            localStorage.removeItem('user')\r\n            sessionStorage.removeItem('token')\r\n            sessionStorage.removeItem('user')\r\n            reject(err)\r\n          })\r\n      })\r\n    },\r\n    \r\n    // Registrazione\r\n    register({ commit }, user) {\r\n      return new Promise((resolve, reject) => {\r\n        commit('AUTH_REQUEST')\r\n        axios.post(`${API_URL}/auth/register`, user)\r\n          .then(resp => {\r\n            resolve(resp)\r\n          })\r\n          .catch(err => {\r\n            commit('AUTH_ERROR')\r\n            reject(err)\r\n          })\r\n      })\r\n    },\r\n    \r\n    // Logout\r\n    logout({ commit }) {\r\n      return new Promise((resolve) => {\r\n        commit('LOGOUT')\r\n        localStorage.removeItem('token')\r\n        localStorage.removeItem('user')\r\n        sessionStorage.removeItem('token')\r\n        sessionStorage.removeItem('user')\r\n        delete axios.defaults.headers.common['Authorization']\r\n        resolve()\r\n      })\r\n    },\r\n    \r\n    // Recupera dati meteo\r\n    fetchWeatherData({ commit }) {\r\n      return new Promise((resolve, reject) => {\r\n        axios.get(`${API_URL}/data/weather`)\r\n          .then(resp => {\r\n            commit('SET_WEATHER_DATA', resp.data)\r\n            resolve(resp)\r\n          })\r\n          .catch(err => {\r\n            reject(err)\r\n          })\r\n      })\r\n    },\r\n    \r\n    // Recupera nuovi dati meteo da API esterna\r\n    fetchNewWeatherData(_, city) {\r\n      return new Promise((resolve, reject) => {\r\n        axios.post(`${API_URL}/data/weather/fetch`, { city })\r\n          .then(resp => {\r\n            resolve(resp)\r\n          })\r\n          .catch(err => {\r\n            reject(err)\r\n          })\r\n      })\r\n    }\r\n  }\r\n}) "],"mappings":"AAAA,SAASA,WAAW,QAAQ,MAAM;AAClC,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAG,2BAA2B;AAE3C,eAAeF,WAAW,CAAC;EACzBG,KAAK,EAAE;IACLC,MAAM,EAAE,EAAE;IACVC,KAAK,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAIC,cAAc,CAACD,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE;IAC7EE,IAAI,EAAEC,IAAI,CAACC,KAAK,CAACL,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAIG,IAAI,CAACC,KAAK,CAACH,cAAc,CAACD,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC;IACpGK,WAAW,EAAE;EACf,CAAC;EACDC,OAAO,EAAE;IACPC,UAAU,EAAEX,KAAK,IAAI,CAAC,CAACA,KAAK,CAACE,KAAK;IAClCU,UAAU,EAAEZ,KAAK,IAAIA,KAAK,CAACC,MAAM;IACjCY,WAAW,EAAEb,KAAK,IAAIA,KAAK,CAACM,IAAI;IAChCQ,OAAO,EAAEd,KAAK,IAAIA,KAAK,CAACM,IAAI,IAAIN,KAAK,CAACM,IAAI,CAACS,IAAI,KAAK,OAAO;IAC3DN,WAAW,EAAET,KAAK,IAAIA,KAAK,CAACS;EAC9B,CAAC;EACDO,SAAS,EAAE;IACTC,YAAYA,CAACjB,KAAK,EAAE;MAClBA,KAAK,CAACC,MAAM,GAAG,SAAS;IAC1B,CAAC;IACDiB,YAAYA,CAAClB,KAAK,EAAE;MAAEE,KAAK;MAAEI;IAAK,CAAC,EAAE;MACnCN,KAAK,CAACC,MAAM,GAAG,SAAS;MACxBD,KAAK,CAACE,KAAK,GAAGA,KAAK;MACnBF,KAAK,CAACM,IAAI,GAAGA,IAAI;IACnB,CAAC;IACDa,UAAUA,CAACnB,KAAK,EAAE;MAChBA,KAAK,CAACC,MAAM,GAAG,OAAO;IACxB,CAAC;IACDmB,MAAMA,CAACpB,KAAK,EAAE;MACZA,KAAK,CAACC,MAAM,GAAG,EAAE;MACjBD,KAAK,CAACE,KAAK,GAAG,EAAE;MAChBF,KAAK,CAACM,IAAI,GAAG,CAAC,CAAC;IACjB,CAAC;IACDe,gBAAgBA,CAACrB,KAAK,EAAEsB,IAAI,EAAE;MAC5BtB,KAAK,CAACS,WAAW,GAAGa,IAAI;IAC1B;EACF,CAAC;EACDC,OAAO,EAAE;IACP;IACAC,KAAKA,CAAC;MAAEC;IAAO,CAAC,EAAEC,QAAQ,EAAE;MAC1B,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACtCJ,MAAM,CAAC,cAAc,CAAC;QACtB3B,KAAK,CAACgC,IAAI,CAAC,GAAG/B,OAAO,aAAa,EAAE;UAClCgC,QAAQ,EAAEL,QAAQ,CAACK,QAAQ;UAC3BC,QAAQ,EAAEN,QAAQ,CAACM;QACrB,CAAC,CAAC,CACCC,IAAI,CAACC,IAAI,IAAI;UACZ,MAAMhC,KAAK,GAAGgC,IAAI,CAACZ,IAAI,CAACpB,KAAK;UAC7B,MAAMI,IAAI,GAAG4B,IAAI,CAACZ,IAAI,CAAChB,IAAI;;UAE3B;UACA;UACA,MAAM6B,OAAO,GAAGT,QAAQ,CAACU,UAAU,GAAGjC,YAAY,GAAGE,cAAc;UAEnE8B,OAAO,CAACE,OAAO,CAAC,OAAO,EAAEnC,KAAK,CAAC;UAC/BiC,OAAO,CAACE,OAAO,CAAC,MAAM,EAAE9B,IAAI,CAAC+B,SAAS,CAAChC,IAAI,CAAC,CAAC;;UAE7C;UACAR,KAAK,CAACyC,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUvC,KAAK,EAAE;UAClEuB,MAAM,CAAC,cAAc,EAAE;YAAEvB,KAAK;YAAEI;UAAK,CAAC,CAAC;UACvCsB,OAAO,CAACM,IAAI,CAAC;QACf,CAAC,CAAC,CACDQ,KAAK,CAACC,GAAG,IAAI;UACZlB,MAAM,CAAC,YAAY,CAAC;UACpBtB,YAAY,CAACyC,UAAU,CAAC,OAAO,CAAC;UAChCzC,YAAY,CAACyC,UAAU,CAAC,MAAM,CAAC;UAC/BvC,cAAc,CAACuC,UAAU,CAAC,OAAO,CAAC;UAClCvC,cAAc,CAACuC,UAAU,CAAC,MAAM,CAAC;UACjCf,MAAM,CAACc,GAAG,CAAC;QACb,CAAC,CAAC;MACN,CAAC,CAAC;IACJ,CAAC;IAED;IACAE,QAAQA,CAAC;MAAEpB;IAAO,CAAC,EAAEnB,IAAI,EAAE;MACzB,OAAO,IAAIqB,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACtCJ,MAAM,CAAC,cAAc,CAAC;QACtB3B,KAAK,CAACgC,IAAI,CAAC,GAAG/B,OAAO,gBAAgB,EAAEO,IAAI,CAAC,CACzC2B,IAAI,CAACC,IAAI,IAAI;UACZN,OAAO,CAACM,IAAI,CAAC;QACf,CAAC,CAAC,CACDQ,KAAK,CAACC,GAAG,IAAI;UACZlB,MAAM,CAAC,YAAY,CAAC;UACpBI,MAAM,CAACc,GAAG,CAAC;QACb,CAAC,CAAC;MACN,CAAC,CAAC;IACJ,CAAC;IAED;IACAG,MAAMA,CAAC;MAAErB;IAAO,CAAC,EAAE;MACjB,OAAO,IAAIE,OAAO,CAAEC,OAAO,IAAK;QAC9BH,MAAM,CAAC,QAAQ,CAAC;QAChBtB,YAAY,CAACyC,UAAU,CAAC,OAAO,CAAC;QAChCzC,YAAY,CAACyC,UAAU,CAAC,MAAM,CAAC;QAC/BvC,cAAc,CAACuC,UAAU,CAAC,OAAO,CAAC;QAClCvC,cAAc,CAACuC,UAAU,CAAC,MAAM,CAAC;QACjC,OAAO9C,KAAK,CAACyC,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;QACrDb,OAAO,CAAC,CAAC;MACX,CAAC,CAAC;IACJ,CAAC;IAED;IACAmB,gBAAgBA,CAAC;MAAEtB;IAAO,CAAC,EAAE;MAC3B,OAAO,IAAIE,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACtC/B,KAAK,CAACkD,GAAG,CAAC,GAAGjD,OAAO,eAAe,CAAC,CACjCkC,IAAI,CAACC,IAAI,IAAI;UACZT,MAAM,CAAC,kBAAkB,EAAES,IAAI,CAACZ,IAAI,CAAC;UACrCM,OAAO,CAACM,IAAI,CAAC;QACf,CAAC,CAAC,CACDQ,KAAK,CAACC,GAAG,IAAI;UACZd,MAAM,CAACc,GAAG,CAAC;QACb,CAAC,CAAC;MACN,CAAC,CAAC;IACJ,CAAC;IAED;IACAM,mBAAmBA,CAACC,CAAC,EAAEC,IAAI,EAAE;MAC3B,OAAO,IAAIxB,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACtC/B,KAAK,CAACgC,IAAI,CAAC,GAAG/B,OAAO,qBAAqB,EAAE;UAAEoD;QAAK,CAAC,CAAC,CAClDlB,IAAI,CAACC,IAAI,IAAI;UACZN,OAAO,CAACM,IAAI,CAAC;QACf,CAAC,CAAC,CACDQ,KAAK,CAACC,GAAG,IAAI;UACZd,MAAM,CAACc,GAAG,CAAC;QACb,CAAC,CAAC;MACN,CAAC,CAAC;IACJ;EACF;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}